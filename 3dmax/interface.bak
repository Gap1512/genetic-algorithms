#lang racket

(require racket/gui plot "shared.rkt" "tournament-elitism.rkt")

(define SCREEN-WIDTH 737)
(define SCREEN-HEIGHT 450)
(define FUNCTION-WIDTH 500)
(define FUNCTION-HEIGHT 300)
(define SETUP-WIDTH 180)

(define main-window (new frame% [label "GENETIC ALGORITHM"]
                         [width SCREEN-WIDTH]
                         [height SCREEN-HEIGHT]))
                         ;[style (list 'no-resize-border)]))

(define main-panel (new horizontal-panel% [parent main-window]
                        [stretchable-width #t]
                        [stretchable-height #t]))

(define setup-panel (new vertical-panel%
                         [parent main-panel]
                         [alignment '(left top)]
                         [min-width 178]))

(define canvas-panel (new horizontal-panel%
                          [parent main-panel]
                          [alignment '(right center)]
                          [min-width FUNCTION-WIDTH]
                          [stretchable-width #t]
                          [stretchable-height #t]))

(define selection (new radio-box%
                       [label "SELECTION"]
                       [parent setup-panel]
                       [choices (list "ROULETTE" "TOURNAMENT")]))

(define tournament-k (new text-field%
                          [label "K"]
                          [parent setup-panel]
                          [init-value "4"]))

(define elitism? (new check-box%
                      [parent setup-panel]
                      [label "ELITISM"]
                      [value #f]))

(define elitism-k (new text-field%
                       [label "K"]
                       [parent setup-panel]
                       [init-value "2"]))

(define resolution (new text-field%
                        [label "RESOLUTION"]
                        [parent setup-panel]
                        [init-value "10"]))

(define range-min (new text-field%
                       [label "RANGE MIN"]
                       [parent setup-panel]
                       [init-value "0"]))

(define range-max (new text-field%
                       [label "RANGE MAX"]
                       [parent setup-panel]
                       [init-value "512"]))

(define pc (new text-field%
                [label "PC"]
                [parent setup-panel]
                [init-value "0.6"]))

(define pm (new text-field%
                [label "PM"]
                [parent setup-panel]
                [init-value "0.01"]))

(define last-generation (new text-field%
                             [label "LAST GENERATION"]
                             [parent setup-panel]
                             [init-value "70"]))

(define number-individuals (new text-field%
                                [label "NUMBER OF INDIVIDUALS"]
                                [parent setup-panel]
                                [init-value "50"]))

(define x-entry (new text-field%
                     [label "X"]
                     [parent setup-panel]
                     [enabled #f]))

(define fx-entry (new text-field%
                      [label "F(X)"]
                      [parent setup-panel]
                      [enabled #f]))

(define start (new button%
                   [label "START"]
                   [parent setup-panel]
                   [stretchable-width #t]
                   [stretchable-height #t]
                   [callback (Î» (b e) (genetic-algorithm))]))

(define editor-graph (new editor-canvas% [parent canvas-panel] [enabled #f]))
(define function-graph (new pasteboard%))
(send editor-graph set-editor function-graph)
(send function-graph insert
      (plot (function GA-FUNCTION
                       (string->number (send range-min get-value))
                       (string->number (send range-max get-value)))
             #:width FUNCTION-WIDTH #:height FUNCTION-HEIGHT
             #:x-label "X" #:y-label "F(X)"))

(define editor-generations (new editor-canvas% [parent canvas-panel] [enabled #f]))
(define generations-graph (new pasteboard%))
(send editor-generations set-editor generations-graph)
(send generations-graph insert
      (plot (function sin (- pi) pi)
            #:width FUNCTION-WIDTH #:height FUNCTION-HEIGHT))

(send main-window show #t)